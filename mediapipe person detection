import cv2
import mediapipe as mp
import numpy as np
mp_drawing = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles
mp_holistic = mp.solutions.holistic
# mp_face_detection = mp.solutions.face_detection
# For static images:
# IMAGE_FILES = []
# with mp_holistic.Holistic(
#     static_image_mode=True,
#     model_complexity=2,
#     enable_segmentation=True,
#     refine_face_landmarks=True) as holistic:
#   for idx, file in enumerate(IMAGE_FILES):
#     image = cv2.imread(file)
#     image_height, image_width, _ = image.shape
#     # Convert the BGR image to RGB before processing.
#     results = holistic.process(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
#
#     if results.pose_landmarks:
#       print(
#           f'Nose coordinates: ('
#           f'{results.pose_landmarks.landmark[mp_holistic.PoseLandmark.NOSE].x * image_width}, '
#           f'{results.pose_landmarks.landmark[mp_holistic.PoseLandmark.NOSE].y * image_height})'
#       )
#
#     annotated_image = image.copy()
#     # Draw segmentation on the image.
#     # To improve segmentation around boundaries, consider applying a joint
#     # bilateral filter to "results.segmentation_mask" with "image".
#     condition = np.stack((results.segmentation_mask,) * 3, axis=-1) > 0.1
#     bg_image = np.zeros(image.shape, dtype=np.uint8)
#     BG_COLOR = bg_image[:]
#     annotated_image = np.where(condition, annotated_image, BG_COLOR)
#     # Draw pose, left and right hands, and face landmarks on the image.
#     mp_drawing.draw_landmarks(
#         annotated_image,
#         results.face_landmarks,
#         mp_holistic.FACEMESH_TESSELATION,
#         landmark_drawing_spec=None,
#         connection_drawing_spec=mp_drawing_styles
#         .get_default_face_mesh_tesselation_style())
#     mp_drawing.draw_landmarks(
#         annotated_image,
#         results.pose_landmarks,
#         mp_holistic.POSE_CONNECTIONS,
#         landmark_drawing_spec=mp_drawing_styles.
#         get_default_pose_landmarks_style())
#     cv2.imwrite('/tmp/annotated_image' + str(idx) + '.png', annotated_image)
#     # Plot pose world landmarks.
#     mp_drawing.plot_landmarks(
#         results.pose_world_landmarks, mp_holistic.POSE_CONNECTIONS)

# For webcam input:
cap = cv2.VideoCapture(0)
with mp_holistic.Holistic(
    min_detection_confidence=0.5,
    min_tracking_confidence=0.5) as holistic:
  while cap.isOpened():
    success, image = cap.read()
    box=[]
    if not success:
      print("Ignoring empty camera frame.")
      # If loading a video, use 'break' instead of 'continue'.
      continue

    # To improve performance, optionally mark the image as not writeable to
    # pass by reference.
    h,w,c = image.shape
    # image = cv2.resize(frame,(w,h))
    image.flags.writeable = False
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    results = holistic.process(image)

    # Draw landmark annotation on the image.
    image.flags.writeable = True
    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
    # if mp_face_detection:
    #     for detection in mp_face_detection:
    #         print(detection.location_data.relative_bounding_box)
    #         box = detection.location_data.relative_bounding_box
    #         cx,cy,cw,ch = box.xmin,box.ymin,box.width,box.height
    #         cv2.rectangle(image,(int(cx*w),int(cy*h)),(int((cx+cw)*w),int((cy+ch)*h)),(0,255,0),2)
    mp_drawing.draw_landmarks(
        image,
        results.face_landmarks,
        mp_holistic.FACEMESH_CONTOURS,
        landmark_drawing_spec=None,
        connection_drawing_spec=mp_drawing_styles
        .get_default_face_mesh_contours_style())
    mp_drawing.draw_landmarks(
        image,
        results.pose_landmarks,
        mp_holistic.POSE_CONNECTIONS,
        landmark_drawing_spec=mp_drawing_styles
        .get_default_pose_landmarks_style())
    mp_drawing.draw_landmarks(
        image,
        results.left_hand_landmarks,
        mp_holistic.HAND_CONNECTIONS)
    mp_drawing.draw_landmarks(
        image,
        results.right_hand_landmarks,
        mp_holistic.HAND_CONNECTIONS)
    x_landmarks = []
    y_landmarks = []
    # Flip the image horizontally for a selfie-view display.
    if results.pose_landmarks:
        for index, landmarks in enumerate(results.pose_landmarks.landmark):
            x_landmarks.append(landmarks.x)
            y_landmarks.append(landmarks.y)
    if results.left_hand_landmarks:
        for index,landmarks in enumerate(results.left_hand_landmarks.landmark):
            x_landmarks.append(landmarks.x)
            y_landmarks.append(landmarks.y)
    if results.right_hand_landmarks:
        for index,landmarks in enumerate(results.right_hand_landmarks.landmark):
            x_landmarks.append(landmarks.x)
            y_landmarks.append(landmarks.y)
    if results.face_landmarks:
        for index,landmarks in enumerate(results.face_landmarks.landmark):
            x_landmarks.append(landmarks.x)
            y_landmarks.append(landmarks.y)
        # print(x_landmarks,y_landmarks)
        cx,cy,cw,ch = min(x_landmarks),min(y_landmarks),max(x_landmarks),max(y_landmarks)
        cx,cy,cw,ch =int(cx*w),int(cy*h),int(cw*w),int(ch*h)
        cv2.rectangle(image,(cx,cy),(cw,ch),(0,0,255),2)

    cv2.imshow('MediaPipe Holistic', cv2.flip(image, 1))
    if cv2.waitKey(5) & 0xFF == 27:
      break
cap.release()
